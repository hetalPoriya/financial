import 'package:financial/controllers/UserInfoController.dart';
import 'package:financial/views/LevelFiveSetUpPage.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:double_back_to_close_app/double_back_to_close_app.dart';
import 'package:draggable_bottom_sheet/draggable_bottom_sheet.dart';
import 'package:financial/ReusableScreen/CommanClass.dart';
import 'package:financial/ReusableScreen/ExpandedBottomDrawer.dart';
import 'package:financial/ReusableScreen/GameScorePage.dart';
import 'package:financial/ReusableScreen/GlobleVariable.dart';
import 'package:financial/ReusableScreen/PreviewOfBottomDrawer.dart';
import 'package:financial/models/QueModel.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:get/get.dart';
import 'package:get_storage/get_storage.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:sizer/sizer.dart';
import 'dart:math';

class AllQueLevelFive extends StatefulWidget {
  const AllQueLevelFive({
    Key? key,
  }) : super(key: key);

  @override
  _AllQueLevelFiveState createState() => _AllQueLevelFiveState();
}

class _AllQueLevelFiveState extends State<AllQueLevelFive> {
  int levelId = 0;
  String level = '';
  int qualityOfLife = 0;
  int gameScore = 0;
  int balance = 0;
  var document;
  int priceOfOption = 0;
  String option = '';
  var userId;
  int? bill;

  //get bill data
  int rentPrice = 0;
  int transportPrice = 0;
  int lifestylePrice = 0;
  int totalHomeLoan = 0;
  int totalTransportLoan = 0;
  int homeLoanFund = 0;
  int transportLoanFund = 0;
  int fund = 0;

  //page controller
  PageController controller = PageController();
  PageController controllerForInner = PageController();
  int currentIndex = 0;
  int totalMutualFund = 0;
  int lastMonthIncDecValue = 0;
  int lastMonthIncDecPer = 0;
  Random rnd = Random();

  //for option selection
  bool flag1 = false;
  bool flag2 = false;
  bool flagForKnow = false;
  Color color = Colors.white;

  //for Monthly Discretionary Fund
  // List<String> fundName = ['Mutual Fund', 'Home EMI', 'Transport EMI'];
  // List<int>  fundAllocation = [0, 0, 0];
  final _controller = Get.put<UserInfoController>(UserInfoController());
  final storeValue = GetStorage();

  //for model
  QueModel? queModel;
  List<QueModel> list = [];
  List<int> innerList = [0, 1, 2];

  Future<QueModel?> getLevelId() async {
    rentPrice = storeValue.read('rentPrice')!;
    transportPrice = storeValue.read('transportPrice')!;
    lifestylePrice = storeValue.read('lifestylePrice')!;
    userId = storeValue.read('uId');

    DocumentSnapshot snapshot =
        await firestore.collection('User').doc(userId).get();
    level = snapshot.get('previous_session_info');
    levelId = snapshot.get('level_id');
    gameScore = snapshot.get('game_score');
    balance = snapshot.get('account_balance');
    totalMutualFund = snapshot.get('mutual_fund');
    totalHomeLoan = snapshot.get('home_loan');
    totalTransportLoan = snapshot.get('transport_loan');
    qualityOfLife = snapshot.get('quality_of_life');
    controller = PageController(initialPage: levelId);
    controllerForInner =
        PageController(initialPage: storeValue.read('level5InnerId'));
    QuerySnapshot querySnapshot =
        await FirebaseFirestore.instance.collection("Level_4").get();
    for (int i = 0; i < querySnapshot.docs.length; i++) {
      var a = querySnapshot.docs[i];
      queModel = QueModel();
      queModel?.id = a['id'];
      setState(() {
        //print(a['id']);
        list.add(queModel!);
      });
    }
  }

  @override
  void initState() {
    super.initState();
    getLevelId();
    _displayFundAllocationBox();
  }

  @override
  Widget build(BuildContext context) {
    final _controller = Get.put(UserInfoController());
    return SafeArea(
        child: Container(
      width: 100.w,
      height: 100.h,
      decoration: boxDecoration,
      child: list.isEmpty
          ? Center(
              child:
                  CircularProgressIndicator(backgroundColor: Color(AllColors.blue)))
          : StreamBuilder<QuerySnapshot>(
              stream: FirebaseFirestore.instance
                  .collection('Level_4')
                  .orderBy('id')
                  .snapshots(),
              builder: (context, snapshot) {
                if (snapshot.hasError) {
                  return Text('It\'s Error!');
                }
                switch (snapshot.connectionState) {
                  case ConnectionState.waiting:
                    return Center(
                      child: CircularProgressIndicator(
                          backgroundColor: Color(AllColors.blue)),
                    );
                  default:
                    return PageView.builder(
                        itemCount: snapshot.data!.docs.length,
                        controller: controller,
                        scrollDirection: Axis.vertical,
                        onPageChanged: (value) {
                          print('CCCCAAAled');
                          storeValue.write('level5InnerId', 0);
                          flag1 = false;
                          flag2 = false;
                        },
                        itemBuilder: (context, index) {
                          document = snapshot.data!.docs[index];
                          controllerForInner = PageController(
                              initialPage: storeValue.read('level5InnerId'));
                          return document['card_type'] == 'GameQuestion'
                              ? StatefulBuilder(
                                  builder: (context, setStateWidget) {
                                  return PageView.builder(
                                    itemCount: innerList.length,
                                    scrollDirection: Axis.vertical,
                                    controller: controllerForInner,
                                    onPageChanged: (value) async {
                                      DocumentSnapshot doc = await firestore
                                          .collection('User')
                                          .doc(userId)
                                          .get();
                                      totalHomeLoan = doc.get('home_loan');
                                      totalTransportLoan =
                                         